// Mocks generated by Mockito 5.2.0 from annotations
// in domain/test/use_cases/client/save_client_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeClientList_1 extends _i1.Fake implements _i2.ClientList {}

/// A class which mocks [ClientRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientRepository extends _i1.Mock implements _i2.ClientRepository {
  MockClientRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> deleteClient(int? clientId) =>
      (super.noSuchMethod(Invocation.method(#deleteClient, [clientId]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i2.Client> getClient(int? clientId) =>
      (super.noSuchMethod(Invocation.method(#getClient, [clientId]),
              returnValue: Future<_i2.Client>.value(_FakeClient_0()))
          as _i3.Future<_i2.Client>);
  @override
  _i3.Future<_i2.ClientList> listClients({int? page}) =>
      (super.noSuchMethod(Invocation.method(#listClients, [], {#page: page}),
              returnValue: Future<_i2.ClientList>.value(_FakeClientList_1()))
          as _i3.Future<_i2.ClientList>);
  @override
  _i3.Future<_i2.Client> saveClient(_i2.Client? client) =>
      (super.noSuchMethod(Invocation.method(#saveClient, [client]),
              returnValue: Future<_i2.Client>.value(_FakeClient_0()))
          as _i3.Future<_i2.Client>);
}
